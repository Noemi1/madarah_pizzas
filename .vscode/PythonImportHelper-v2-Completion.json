[
    {
        "label": "cliente",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cliente",
        "description": "cliente",
        "detail": "cliente",
        "documentation": {}
    },
    {
        "label": "row_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "rows_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "tuple_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "rows_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "tuple_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "row_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "rows_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "tuple_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "rows_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "tuple_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "row_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "rows_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "tuple_to_dict",
        "importPath": "functions.functions",
        "description": "functions.functions",
        "isExtraImport": true,
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "flask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask",
        "description": "flask",
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "stat",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "psycopg2.extras",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "functions",
        "description": "functions",
        "isExtraImport": true,
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "functions",
        "description": "functions",
        "isExtraImport": true,
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "PagSeguro",
        "importPath": "pagseguro",
        "description": "pagseguro",
        "isExtraImport": true,
        "detail": "pagseguro",
        "documentation": {}
    },
    {
        "label": "PagSeguro",
        "importPath": "pagseguro",
        "description": "pagseguro",
        "isExtraImport": true,
        "detail": "pagseguro",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Null",
        "importPath": "pyasn1.type.univ",
        "description": "pyasn1.type.univ",
        "isExtraImport": true,
        "detail": "pyasn1.type.univ",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "pizzaBP",
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "isExtraImport": true,
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "carrinhoBP",
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "isExtraImport": true,
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "clienteBP",
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "isExtraImport": true,
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "pedidoBP",
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "isExtraImport": true,
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "google",
        "description": "google",
        "isExtraImport": true,
        "detail": "google",
        "documentation": {}
    },
    {
        "label": "id_token",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "Flow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "cachecontrol",
        "importPath": "pip._vendor",
        "description": "pip._vendor",
        "isExtraImport": true,
        "detail": "pip._vendor",
        "documentation": {}
    },
    {
        "label": "google.auth.transport.requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "list_aside",
        "kind": 2,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "def list_aside(id_cliente):\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n                      c.id_item_carrinho\n                    , c.quantidade\n                    , c.id_cliente\n                    , p.sabor\n                    , p.descricao\n                    , p.valor\n                    , p.url_foto",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "adicionar",
        "kind": 2,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "def adicionar(id_pizza, id_cliente):\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_item_carrinho WHERE id_cliente = %s AND id_pizza = %s LIMIT 1\"\"\"\n        cursor.execute(sql, (id_cliente, id_pizza))\n        item = row_to_dict(cursor.description, cursor.fetchone())\n        if item:\n            quantidade = int(item['quantidade']) + 1\n            sql = \"\"\"UPDATE madarah.tb_item_carrinho SET quantidade = %s WHERE id_item_carrinho = %s\"\"\"\n            cursor.execute(sql, (quantidade, item['id_item_carrinho']))\n        else:    ",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "set_quantidade",
        "kind": 2,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "def set_quantidade(id, qtd): \n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_item_carrinho WHERE id_item_carrinho = %s LIMIT 1\"\"\"\n        cursor.execute(sql, (id))\n        item = row_to_dict(cursor.description, cursor.fetchone())\n        if item:\n            if (qtd == '0'):\n                sql = \"\"\"DELETE FROM madarah.tb_item_carrinho WHERE id_item_carrinho = %s\"\"\"\n                cursor.execute(sql, id)\n            else:",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "finalizar",
        "kind": 2,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "def finalizar():\n    cliente = session['cliente']\n    usuario = session['usuario']\n    if(not(cliente) or not(usuario)):\n        return os.abort()\n    if(cliente['telefone'] == '' or not(cliente['telefone1']) or not(cliente['type'] or not(cliente['street']) or not(cliente['number'])  or not(cliente['district'])  or not(cliente['postal_code']) or not(cliente['city']) or not(cliente['state']) )):\n        return os.abort()\n    pg = PagSeguro(email=\"madarah.impacta@gmail.com\", token=\"45B4AE1FB8684648B476ACA83627DA1D\", data=None, config=config)\n    pg.sender = {\n        # \"name\": str(usuario['nome']),",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "POSTGRESQL_URI",
        "kind": 5,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "POSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\ncarrinhoBP = Blueprint('carrinho', __name__, template_folder='templates', static_folder='static')\nconfig = {'sandbox': True}\n# pg = PagSeguro(email=\"v94208027278758069937@sandbox.pagseguro.com.br\", token=\"4F540BCC2828D389943F6F9687FD198B\")\nPOSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\n# headers = {}\n# headers['Authorization'] = \"Bearer 45B4AE1FB8684648B476ACA83627DA1D\"\n# headers['Accept'] = \"appplication/json\"\n# headers['Content-Type'] = \"appplication/json\"",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "carrinhoBP",
        "kind": 5,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "carrinhoBP = Blueprint('carrinho', __name__, template_folder='templates', static_folder='static')\nconfig = {'sandbox': True}\n# pg = PagSeguro(email=\"v94208027278758069937@sandbox.pagseguro.com.br\", token=\"4F540BCC2828D389943F6F9687FD198B\")\nPOSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\n# headers = {}\n# headers['Authorization'] = \"Bearer 45B4AE1FB8684648B476ACA83627DA1D\"\n# headers['Accept'] = \"appplication/json\"\n# headers['Content-Type'] = \"appplication/json\"\n# r = requests.post('https://sandbox.api.pagseguro.com/oauth2/application', json={",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "config = {'sandbox': True}\n# pg = PagSeguro(email=\"v94208027278758069937@sandbox.pagseguro.com.br\", token=\"4F540BCC2828D389943F6F9687FD198B\")\nPOSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\n# headers = {}\n# headers['Authorization'] = \"Bearer 45B4AE1FB8684648B476ACA83627DA1D\"\n# headers['Accept'] = \"appplication/json\"\n# headers['Content-Type'] = \"appplication/json\"\n# r = requests.post('https://sandbox.api.pagseguro.com/oauth2/application', json={\n#     \"name\": 'Madarah pizzas',",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "POSTGRESQL_URI",
        "kind": 5,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "POSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\n# headers = {}\n# headers['Authorization'] = \"Bearer 45B4AE1FB8684648B476ACA83627DA1D\"\n# headers['Accept'] = \"appplication/json\"\n# headers['Content-Type'] = \"appplication/json\"\n# r = requests.post('https://sandbox.api.pagseguro.com/oauth2/application', json={\n#     \"name\": 'Madarah pizzas',\n#     \"description\": 'Delivery de pizzas',\n#     \"site\": 'http://127.0.0.1:5000/',",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "carrinho.carrinho",
        "description": "carrinho.carrinho",
        "peekOfCode": "connection = psycopg2.connect(POSTGRESQL_URI)\n# headers = {}\n# headers['Authorization'] = \"Bearer 45B4AE1FB8684648B476ACA83627DA1D\"\n# headers['Accept'] = \"appplication/json\"\n# headers['Content-Type'] = \"appplication/json\"\n# r = requests.post('https://sandbox.api.pagseguro.com/oauth2/application', json={\n#     \"name\": 'Madarah pizzas',\n#     \"description\": 'Delivery de pizzas',\n#     \"site\": 'http://127.0.0.1:5000/',\n#     \"redirect_uri\": 'http://127.0.0.1:5000/',",
        "detail": "carrinho.carrinho",
        "documentation": {}
    },
    {
        "label": "list_clientes",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def list_clientes():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n                      c.id_cliente\n                    , c.nome\n                    , u.email\n                    , c.telefone\n                    , c.telefone1\n        FROM madarah.tb_cliente as c \n        INNER JOIN madarah.tb_usuario as u on u.id_usuario = c.id_usuario ",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "cadastro_cliente",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def cadastro_cliente():\n    if flask.request.method == 'POST':\n        id_cliente_usuario = int(request.form['id_cliente_usuario']),\n        nome = str(request.form['nome']),\n        endereco = str(request.form['endereco']),\n        telefone1 = str(request.form['cep']),\n        telefone2 = float(request.form['telefone'])\n        with connection.cursor() as cursor:\n            sql = \"\"\"INSERT INTO madarah.tb_cliente (id_cliente_usuario, nome, endereco, telefone1, telefone2) \n            VALUES (%s, %s, %s, %s, %s)\"\"\"",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "editar_get",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def editar_get(id_cliente):\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_cliente WHERE id_cliente = (%s) LIMIT 1 \"\"\"\n        cursor.execute(sql, id_cliente)\n        cliente = tuple_to_dict(cursor.description, cursor.fetchone())\n        sql = \"\"\"SELECT * FROM madarah.tb_endereco WHERE id_cliente = (%s) AND ativo = true\"\"\"\n        cursor.execute(sql, id_cliente)\n        enderecos = rows_to_dict(cursor.description, cursor.fetchall())\n    return render_template('edit.html', cliente=cliente, enderecos=enderecos)\n@clienteBP.route('/cliente/editar/<id_cliente>', methods=['POST'])",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "editar_post",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def editar_post(id_cliente):\n    id_cliente = int(request.form['id_cliente'])\n    nome = str(request.form['nome'])\n    telefone = str(request.form['telefone'])\n    telefone1 = str(request.form['telefone1'])\n    with connection.cursor() as cursor:\n        sql = \"\"\"UPDATE madarah.tb_cliente SET \n                        nome = (%s), \n                        telefone = (%s), \n                        telefone1 = (%s)",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "cadastrar_endereco_get",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def cadastrar_endereco_get(id_cliente):\n    return render_template('cadastrar-endereco.html', id_cliente=id_cliente)\n@clienteBP.route('/cliente/cadastrar-endereco/<id_cliente>', methods=['POST'])\ndef cadastrar_endereco_post(id_cliente):\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "cadastrar_endereco_post",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def cadastrar_endereco_post(id_cliente):\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])\n    city = str(request.form['city'])\n    state = str(request.form['state'])\n    country = 'BRA'",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "editar_endereco_get",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def editar_endereco_get(id_endereco):\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_endereco WHERE id_endereco = \"\"\" + id_endereco\n        cursor.execute(sql)\n        endereco = tuple_to_dict(cursor.description, cursor.fetchone())\n    return render_template('editar-endereco.html', endereco=endereco)\n@clienteBP.route('/cliente/editar-endereco/<id_endereco>', methods=['POST'])\ndef editar_endereco_post(id_endereco):\n    type = str(request.form['type'])\n    street = str(request.form['street'])",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "editar_endereco_post",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def editar_endereco_post(id_endereco):\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])\n    city = str(request.form['city'])\n    state = str(request.form['state'])\n    country = 'BRA'",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "excluir_endereco",
        "kind": 2,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "def excluir_endereco(id_endereco):\n    with connection.cursor() as cursor:\n        sql = \"\"\"UPDATE madarah.tb_endereco SET\n                    ativo = false\n                WHERE id_endereco = \"\"\" + id_endereco\n        cursor.execute(sql)\n        cursor.close()\n        connection.commit()\n    return 'OK'",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "POSTGRESQL_URI",
        "kind": 5,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "POSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nclienteBP = Blueprint('cliente', __name__, template_folder='templates', static_folder='static')\nconnection = psycopg2.connect(POSTGRESQL_URI)\n@clienteBP.route('/clientes', methods=['GET'])\ndef list_clientes():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n                      c.id_cliente\n                    , c.nome\n                    , u.email",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "clienteBP",
        "kind": 5,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "clienteBP = Blueprint('cliente', __name__, template_folder='templates', static_folder='static')\nconnection = psycopg2.connect(POSTGRESQL_URI)\n@clienteBP.route('/clientes', methods=['GET'])\ndef list_clientes():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n                      c.id_cliente\n                    , c.nome\n                    , u.email\n                    , c.telefone",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "cliente.cliente",
        "description": "cliente.cliente",
        "peekOfCode": "connection = psycopg2.connect(POSTGRESQL_URI)\n@clienteBP.route('/clientes', methods=['GET'])\ndef list_clientes():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n                      c.id_cliente\n                    , c.nome\n                    , u.email\n                    , c.telefone\n                    , c.telefone1",
        "detail": "cliente.cliente",
        "documentation": {}
    },
    {
        "label": "row_to_dict",
        "kind": 2,
        "importPath": "functions.functions",
        "description": "functions.functions",
        "peekOfCode": "def row_to_dict(description, row):\n    if row is None:\n        return None\n    d = {}\n    for i in range(0, len(row)):\n        value = row[i]\n        key = description[i][0]\n        try:\n            d[key] = value\n        except NameError:",
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "rows_to_dict",
        "kind": 2,
        "importPath": "functions.functions",
        "description": "functions.functions",
        "peekOfCode": "def rows_to_dict(description, rows):\n    result = []\n    for row in rows:\n        result.append(row_to_dict(description, row))\n    return result\ndef tuple_to_dict(description, row):\n    if row is None or row == []:\n        return None\n    d = {}\n    for i in range(0, len(row)):",
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "tuple_to_dict",
        "kind": 2,
        "importPath": "functions.functions",
        "description": "functions.functions",
        "peekOfCode": "def tuple_to_dict(description, row):\n    if row is None or row == []:\n        return None\n    d = {}\n    for i in range(0, len(row)):\n        value = row[i]\n        key = description[i][0]\n        try:\n            d[key] = value\n        except NameError:",
        "detail": "functions.functions",
        "documentation": {}
    },
    {
        "label": "listar",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def listar():\n    authenticate =  session if 'google_id' in session else False\n    cliente = session['cliente'] or False\n    usuario = session['usuario'] or False\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n              p.id_pedido\n            ,  p.codigo_de_compra as codigo\n            ,  p.total\n            ,  p.date",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "list_meus_pedidos",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def list_meus_pedidos():\n    authenticate =  session if 'google_id' in session else False\n    cliente = session['cliente'] or False;\n    usuario = session['usuario'] or False;\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n              p.id_pedido\n            ,  p.codigo_de_compra as codigo\n            ,  p.total\n            ,  p.date",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "confirmar_endereco_get",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def confirmar_endereco_get():\n    cliente = session['cliente']\n    with connection.cursor() as cursor: \n        sql = \"\"\"SELECT * FROM madarah.tb_endereco WHERE id_cliente = (%s) AND ativo = true\"\"\"\n        cursor.execute(sql, str(cliente['id_cliente']))\n        enderecos = rows_to_dict(cursor.description, cursor.fetchall())\n    return render_template('confirmar-endereco.html', cliente=cliente, enderecos=enderecos)\n@pedidoBP.route('/pedido/confirmar-endereco', methods=['POST'])\ndef confirmar_endereco_post():\n    cliente = session['cliente']",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "confirmar_endereco_post",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def confirmar_endereco_post():\n    cliente = session['cliente']\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])\n    city = str(request.form['city'])\n    state = str(request.form['state'])",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "pedido_finalizado",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def pedido_finalizado(id):\n    authenticate =  session if 'google_id' in session else False\n    with connection.cursor() as cursor: \n        cliente = False\n        user = False\n        if authenticate:\n            sql = \"\"\"SELECT * FROM madarah.tb_usuario WHERE google_id = '\"\"\" + authenticate['google_id'] + \"\"\"' LIMIT 1\"\"\"\n            cursor.execute(sql)\n            user = tuple_to_dict(cursor.description, cursor.fetchone())\n            sql = \"\"\"SELECT * FROM madarah.tb_cliente WHERE id_usuario = \"\"\" + str(user['id_usuario']) + \"\"\" LIMIT 1\"\"\"",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "cadastrar",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def cadastrar():\n    if flask.request.method == 'POST':\n        connection = psycopg2.connect(POSTGRESQL_URI)\n        id_cliente_usuario = int(request.form['id_cliente_usuario']),\n        nome = str(request.form['nome']),\n        endereco = str(request.form['endereco']),\n        telefone1 = str(request.form['cep']),\n        telefone2 = float(request.form['telefone'])\n        status = float(request.form['status'])\n        with connection.cursor() as cursor:",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "editar",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def editar():\n    if flask.request.method == 'POST':\n        id_cliente_usuario = int(request.form['id_cliente_usuario']),\n        nome = str(request.form['nome']),\n        endereco = str(request.form['endereco']),\n        telefone1 = str(request.form['cep']),\n        telefone2 = float(request.form['telefone'])\n        status = float(request.form['status'])\n        with connection.cursor() as cursor:\n            sql = \"\"\"update madarah.tb_pedido SET nome = (%s), endereco = (%s), telefone1 = (%s), telefone2 = (%s), status = (%s) WHERE id_cliente_usuario = (%s)\"\"\"",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "excluir",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def excluir(id):\n    with connection.cursor() as cursor:\n        sql = \"\"\"delete madarah.tb_pedido where id_pedido = (%s)\"\"\"\n        cursor.execute(sql, id)\n        lista = cursor.fetchall()\n    return render_template('delete.html')\n@pedidoBP.route('/pedidos/status/<int:id>', methods=['POST'])\ndef status(id):\n    status = str(request.form['status'])\n    with connection.cursor() as cursor:",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def status(id):\n    status = str(request.form['status'])\n    with connection.cursor() as cursor:\n        sql = \"\"\"UPDATE madarah.tb_pedido SET status = (%s) where id_pedido = (%s) returning * \"\"\"\n        cursor.execute(sql, (status, str(id)))\n        connection.commit()\n    return 'OK'\n@pedidoBP.route('/pedidos/cadastrar-endereco/<id_cliente>', methods=['GET'])\ndef cadastrar_endereco_get(id_cliente):\n    return render_template('cadastrar-endereco.html', id_cliente=id_cliente)",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "cadastrar_endereco_get",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def cadastrar_endereco_get(id_cliente):\n    return render_template('cadastrar-endereco.html', id_cliente=id_cliente)\n@pedidoBP.route('/pedidos/cadastrar-endereco/<id_cliente>', methods=['POST'])\ndef cadastrar_endereco_post(id_cliente):\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "cadastrar_endereco_post",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def cadastrar_endereco_post(id_cliente):\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])\n    city = str(request.form['city'])\n    state = str(request.form['state'])\n    country = 'BRA'",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "editar_endereco_get",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def editar_endereco_get(id_endereco):\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_endereco WHERE id_endereco = \"\"\" + id_endereco\n        cursor.execute(sql)\n        endereco = tuple_to_dict(cursor.description, cursor.fetchone())\n    return render_template('editar-endereco.html', endereco=endereco)\n@pedidoBP.route('/pedidos/editar-endereco/<id_endereco>', methods=['POST'])\ndef editar_endereco_post(id_endereco):\n    type = str(request.form['type'])\n    street = str(request.form['street'])",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "editar_endereco_post",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def editar_endereco_post(id_endereco):\n    type = str(request.form['type'])\n    street = str(request.form['street'])\n    number = str(request.form['number'])\n    postal_code = str(request.form['postal_code'])\n    complement = str(request.form['complement'])\n    district = str(request.form['district'])\n    city = str(request.form['city'])\n    state = str(request.form['state'])\n    country = 'BRA'",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "excluir_endereco",
        "kind": 2,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "def excluir_endereco(id_endereco):\n    with connection.cursor() as cursor:\n        sql = \"\"\"UPDATE madarah.tb_endereco SET\n                    ativo = false\n                WHERE id_endereco = \"\"\" + id_endereco\n        cursor.execute(sql)\n        cursor.close()\n        connection.commit()\n    return 'OK'",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "POSTGRESQL_URI",
        "kind": 5,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "POSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\npedidoBP = Blueprint('pedido', __name__, template_folder='templates', static_folder='static')\nconnection = psycopg2.connect(POSTGRESQL_URI)\n@pedidoBP.route('/pedidos', methods=['GET'])\ndef listar():\n    authenticate =  session if 'google_id' in session else False\n    cliente = session['cliente'] or False\n    usuario = session['usuario'] or False\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT ",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "pedidoBP",
        "kind": 5,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "pedidoBP = Blueprint('pedido', __name__, template_folder='templates', static_folder='static')\nconnection = psycopg2.connect(POSTGRESQL_URI)\n@pedidoBP.route('/pedidos', methods=['GET'])\ndef listar():\n    authenticate =  session if 'google_id' in session else False\n    cliente = session['cliente'] or False\n    usuario = session['usuario'] or False\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n              p.id_pedido",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "pedido.pedido",
        "description": "pedido.pedido",
        "peekOfCode": "connection = psycopg2.connect(POSTGRESQL_URI)\n@pedidoBP.route('/pedidos', methods=['GET'])\ndef listar():\n    authenticate =  session if 'google_id' in session else False\n    cliente = session['cliente'] or False\n    usuario = session['usuario'] or False\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT \n              p.id_pedido\n            ,  p.codigo_de_compra as codigo",
        "detail": "pedido.pedido",
        "documentation": {}
    },
    {
        "label": "cardapio",
        "kind": 2,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "def cardapio():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_pizza order by sabor\"\"\"\n        cursor.execute(sql)\n        lista = rows_to_dict(cursor.description, cursor.fetchall())\n        cliente = session['cliente'] or False\n        usuario = session['usuario'] or False\n        auth = session if usuario else False\n    return render_template(\"cardapio.html\", pizzas=lista, cliente=cliente, usuario=usuario, auth=auth)\n@pizzaBP.route('/pizzas', methods=['GET'])",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "def list():\n    connection = psycopg2.connect(POSTGRESQL_URI)\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_pizza order by sabor\"\"\"\n        cursor.execute(sql)\n        lista = rows_to_dict(cursor.description, cursor.fetchall())\n        cliente = session['cliente']\n        usuario = session['usuario']\n    return render_template(\"list.html\", pizzas=lista, cliente=cliente, usuario=usuario, auth=session)\n@pizzaBP.route('/pizza/cadastro', methods=['GET', 'POST'])",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "cadastro_pizza",
        "kind": 2,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "def cadastro_pizza():\n    if flask.request.method == 'POST':\n        sabor = str(request.form['sabor']),\n        descricao = str(request.form['descricao']),\n        valor = request.form['valor'].replace('.', ',').replace(',', '.')\n        valor = float(valor)\n        url_foto = str(request.form['url_foto'])\n        connection = psycopg2.connect(POSTGRESQL_URI)\n        with connection.cursor() as cursor:\n            sql = \"\"\"insert into madarah.tb_pizza (sabor, descricao, valor, url_foto) VALUES (%s, %s, %s, %s)\"\"\"",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "edicao_pizza",
        "kind": 2,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "def edicao_pizza(id):\n    connection = psycopg2.connect(POSTGRESQL_URI)\n    if flask.request.method == 'POST':\n        id_pizza = int(request.form['id_pizza'])\n        sabor = str(request.form['sabor'])\n        descricao = str(request.form['descricao'])\n        valor = request.form['valor'].replace('.', ',').replace(',', '.')\n        valor = float(valor)\n        url_foto = str(request.form['url_foto'])\n        weight = str(request.form['weight'])",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "delete_pizza",
        "kind": 2,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "def delete_pizza(id):\n    connection = psycopg2.connect(POSTGRESQL_URI)\n    if flask.request.method == 'POST':\n        with connection.cursor() as cursor:\n            sql = \"DELETE FROM madarah.tb_pizza WHERE id_pizza = \" + id\n            cursor.execute(sql)\n            connection.commit()\n            cursor.close()\n        return '/pizzas'\n    else:",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "POSTGRESQL_URI",
        "kind": 5,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "POSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\npizzaBP = Blueprint('pizza', __name__, template_folder='templates', static_folder='static')\nconnection = psycopg2.connect(POSTGRESQL_URI)\n@pizzaBP.route('/cardapio', methods=['GET'])\ndef cardapio():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_pizza order by sabor\"\"\"\n        cursor.execute(sql)\n        lista = rows_to_dict(cursor.description, cursor.fetchall())\n        cliente = session['cliente'] or False",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "pizzaBP",
        "kind": 5,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "pizzaBP = Blueprint('pizza', __name__, template_folder='templates', static_folder='static')\nconnection = psycopg2.connect(POSTGRESQL_URI)\n@pizzaBP.route('/cardapio', methods=['GET'])\ndef cardapio():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_pizza order by sabor\"\"\"\n        cursor.execute(sql)\n        lista = rows_to_dict(cursor.description, cursor.fetchall())\n        cliente = session['cliente'] or False\n        usuario = session['usuario'] or False",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "pizza.pizza",
        "description": "pizza.pizza",
        "peekOfCode": "connection = psycopg2.connect(POSTGRESQL_URI)\n@pizzaBP.route('/cardapio', methods=['GET'])\ndef cardapio():\n    with connection.cursor() as cursor:\n        sql = \"\"\"SELECT * FROM madarah.tb_pizza order by sabor\"\"\"\n        cursor.execute(sql)\n        lista = rows_to_dict(cursor.description, cursor.fetchall())\n        cliente = session['cliente'] or False\n        usuario = session['usuario'] or False\n        auth = session if usuario else False",
        "detail": "pizza.pizza",
        "documentation": {}
    },
    {
        "label": "login_is_required",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login_is_required(function):\n    def wrapper(*args, **kwargs):\n        if \"google_id\" not in session:\n            return abort(401)  # Authorization required\n        else:\n            return function()\n    return wrapper\n@app.route('/')\ndef index():\n    authenticate =  session if 'google_id' in session else False",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    authenticate =  session if 'google_id' in session else False\n    with connection.cursor() as cursor:\n        cursor.execute('''SELECT * from madarah.tb_pizza order by id_pizza''')\n        lista = rows_to_dict(cursor.description, cursor.fetchall())\n        cliente = False\n        user = False\n        if authenticate:\n            sql = \"\"\"SELECT * FROM madarah.tb_usuario WHERE google_id = '\"\"\" + authenticate['google_id'] + \"\"\"' LIMIT 1\"\"\"\n            cursor.execute(sql)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    authorization_url, state = flow.authorization_url()\n    session[\"state\"] = state\n    return redirect(authorization_url)\n@app.route(\"/callback\")\ndef callback():\n    flow.fetch_token(authorization_response=request.url)\n    if not session[\"state\"] == request.args[\"state\"]:\n        abort(500)  # State does not match!\n    credentials = flow.credentials",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def callback():\n    flow.fetch_token(authorization_response=request.url)\n    if not session[\"state\"] == request.args[\"state\"]:\n        abort(500)  # State does not match!\n    credentials = flow.credentials\n    request_session = requests.session()\n    cached_session = cachecontrol.CacheControl(request_session)\n    token_request = google.auth.transport.requests.Request(session=cached_session)\n    id_info = id_token.verify_oauth2_token(\n        id_token=credentials._id_token,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def logout():\n    # sendEmail(session['name'],session['email'], 'logout')\n    session.clear()\n    return redirect(\"/\")\n@app.route(\"/profile\")\n@login_is_required\ndef protected_area():\n    name = session['name']\n    authenticate =  session['name'] if 'google_id' in session else False\n    return render_template('/', name=name, auth=authenticate)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "protected_area",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def protected_area():\n    name = session['name']\n    authenticate =  session['name'] if 'google_id' in session else False\n    return render_template('/', name=name, auth=authenticate)\ndef sendEmail(nome, email, acao):\n    host = 'smtp.gmail.com'\n    port = '587'\n    login = 'madarah.impacta@gmail.com'\n    senha = 'cadomeew'\n    server = smtplib.SMTP(host, port)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sendEmail",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def sendEmail(nome, email, acao):\n    host = 'smtp.gmail.com'\n    port = '587'\n    login = 'madarah.impacta@gmail.com'\n    senha = 'cadomeew'\n    server = smtplib.SMTP(host, port)\n    server.ehlo()\n    server.starttls()\n    server.login(login, senha)\n    body = f'Você fez {acao} com {nome} - {email}'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__, template_folder='templates', static_folder='static')\napp.secret_key = \"CodeSpecialist.com\"\nos.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\nGOOGLE_CLIENT_ID = \"255715985919-6rjumhu5881vldgqdkjh7i558o7h3cso.apps.googleusercontent.com\"\nclient_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_secret.json\")\nflow = Flow.from_client_secrets_file(\n    client_secrets_file=client_secrets_file,\n    scopes=[\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\", \"openid\"],\n    redirect_uri=\"http://127.0.0.1:5000/callback\"\n)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = \"CodeSpecialist.com\"\nos.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\nGOOGLE_CLIENT_ID = \"255715985919-6rjumhu5881vldgqdkjh7i558o7h3cso.apps.googleusercontent.com\"\nclient_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_secret.json\")\nflow = Flow.from_client_secrets_file(\n    client_secrets_file=client_secrets_file,\n    scopes=[\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\", \"openid\"],\n    redirect_uri=\"http://127.0.0.1:5000/callback\"\n)\napp.config['FLASK_ADMIN_SWATCH'] = 'united'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\nGOOGLE_CLIENT_ID = \"255715985919-6rjumhu5881vldgqdkjh7i558o7h3cso.apps.googleusercontent.com\"\nclient_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_secret.json\")\nflow = Flow.from_client_secrets_file(\n    client_secrets_file=client_secrets_file,\n    scopes=[\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\", \"openid\"],\n    redirect_uri=\"http://127.0.0.1:5000/callback\"\n)\napp.config['FLASK_ADMIN_SWATCH'] = 'united'\nadmin = Admin(app, name='Pizza For Fun', template_mode='bootstrap3')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CLIENT_ID",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "GOOGLE_CLIENT_ID = \"255715985919-6rjumhu5881vldgqdkjh7i558o7h3cso.apps.googleusercontent.com\"\nclient_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_secret.json\")\nflow = Flow.from_client_secrets_file(\n    client_secrets_file=client_secrets_file,\n    scopes=[\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\", \"openid\"],\n    redirect_uri=\"http://127.0.0.1:5000/callback\"\n)\napp.config['FLASK_ADMIN_SWATCH'] = 'united'\nadmin = Admin(app, name='Pizza For Fun', template_mode='bootstrap3')\nlogin_manager = LoginManager()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client_secrets_file",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_secret.json\")\nflow = Flow.from_client_secrets_file(\n    client_secrets_file=client_secrets_file,\n    scopes=[\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\", \"openid\"],\n    redirect_uri=\"http://127.0.0.1:5000/callback\"\n)\napp.config['FLASK_ADMIN_SWATCH'] = 'united'\nadmin = Admin(app, name='Pizza For Fun', template_mode='bootstrap3')\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "flow",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "flow = Flow.from_client_secrets_file(\n    client_secrets_file=client_secrets_file,\n    scopes=[\"https://www.googleapis.com/auth/userinfo.profile\", \"https://www.googleapis.com/auth/userinfo.email\", \"openid\"],\n    redirect_uri=\"http://127.0.0.1:5000/callback\"\n)\napp.config['FLASK_ADMIN_SWATCH'] = 'united'\nadmin = Admin(app, name='Pizza For Fun', template_mode='bootstrap3')\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\napp.register_blueprint(pizzaBP)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['FLASK_ADMIN_SWATCH']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['FLASK_ADMIN_SWATCH'] = 'united'\nadmin = Admin(app, name='Pizza For Fun', template_mode='bootstrap3')\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\napp.register_blueprint(pizzaBP)\napp.register_blueprint(carrinhoBP)\napp.register_blueprint(clienteBP)\napp.register_blueprint(pedidoBP)\nPOSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "admin = Admin(app, name='Pizza For Fun', template_mode='bootstrap3')\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\napp.register_blueprint(pizzaBP)\napp.register_blueprint(carrinhoBP)\napp.register_blueprint(clienteBP)\napp.register_blueprint(pedidoBP)\nPOSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\ndef login_is_required(function):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\napp.register_blueprint(pizzaBP)\napp.register_blueprint(carrinhoBP)\napp.register_blueprint(clienteBP)\napp.register_blueprint(pedidoBP)\nPOSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\ndef login_is_required(function):\n    def wrapper(*args, **kwargs):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "POSTGRESQL_URI",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "POSTGRESQL_URI = \"postgres://nrzaptwjbceonc:85e6f9cb1eb0447157fa9de8cc08cd804f02a1e555b5747860ec3a6d9f9140a0@ec2-35-153-91-18.compute-1.amazonaws.com:5432/d939kg82f0uljg\"\nconnection = psycopg2.connect(POSTGRESQL_URI)\ndef login_is_required(function):\n    def wrapper(*args, **kwargs):\n        if \"google_id\" not in session:\n            return abort(401)  # Authorization required\n        else:\n            return function()\n    return wrapper\n@app.route('/')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "connection = psycopg2.connect(POSTGRESQL_URI)\ndef login_is_required(function):\n    def wrapper(*args, **kwargs):\n        if \"google_id\" not in session:\n            return abort(401)  # Authorization required\n        else:\n            return function()\n    return wrapper\n@app.route('/')\ndef index():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    EXTRA_AMOUNT = 12.12\n    REDIRECT_URL = \"http://meusite.com/obrigado\"\n    NOTIFICATION_URL = \"http://meusite.com/notification\"\n    EMAIL = \"madarah.impacta@gmail.com\"\n    TOKEN = \"45B4AE1FB8684648B476ACA83627DA1D\"\n    SECRET_KEY = \"s3cr3t\"\nclass DevelopmentConfig(Config):\n    FLASK_ENV = 'development'\nCONFIG = {",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelopmentConfig(Config):\n    FLASK_ENV = 'development'\nCONFIG = {\n    'development': DevelopmentConfig\n}",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CONFIG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CONFIG = {\n    'development': DevelopmentConfig\n}",
        "detail": "config",
        "documentation": {}
    }
]